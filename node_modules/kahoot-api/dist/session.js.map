{"version":3,"sources":["../src/session.js"],"names":["window","cometdAdapter","adapt","cometd","require","Session","pin","proxy","web","WebApi","check","then","info","connect","http","get","Helpers","time","response","data","token","headers","error","message","includes","Error","socket","CometD","challenge","solve","session","shiftBits","containsInvalidChar","test","secondInfo","configure","url","websocketEnabled","handshake","Promise","resolve","successful"],"mappings":"gvBAKsB,WAAlB,QAAOA,CAAAA,M,EACTC,+BAAcC,KAAd,E,IAIIC,CAAAA,MAAM,CAAGC,OAAO,CAAC,QAAD,C,CAQDC,O,YAQnB,WAAYC,CAAZ,CAAiBC,CAAjB,CAAwB,yCACtB,KAAKD,GAAL,CAAWA,CADW,CAEtB,KAAKC,KAAL,CAAaA,CAFS,CAGtB,KAAKC,GAAL,CAAW,GAAIC,gBAHO,CAKtB,KAAKD,GAAL,CAASD,KAAT,CAAiBA,CAClB,C,mFAQY,YACX,MAAO,MAAKG,KAAL,CAAW,KAAKJ,GAAhB,EAAqBK,IAArB,CAA0B,SAACC,CAAD,QAAU,CAAA,CAAI,CAACC,OAAL,CAAaD,CAAb,CAAV,CAA1B,CACR,C,gHASWN,C,+GACHQ,iBACJC,GADI,WACG,KAAKR,KADR,8CACkDD,CADlD,cAC0DU,oBAAQC,IAAR,EAD1D,GAEJN,IAFI,CAEC,SAACO,CAAD,CAAc,CAClB,GAAMN,CAAAA,CAAI,CAAGM,CAAQ,CAACC,IAAtB,CAIA,MAHAP,CAAAA,CAAI,CAACQ,KAAL,CAAaF,CAAQ,CAACG,OAAT,CAAiB,wBAAjB,CAGb,CAFAT,CAAI,CAACN,GAAL,CAAWA,CAEX,CAAOM,CACR,CARI,WASE,SAACU,CAAD,CAAW,CAChB,GAAIA,CAAK,CAACC,OAAN,CAAcC,QAAd,CAAuB,KAAvB,CAAJ,CACE,KAAM,IAAIC,CAAAA,KAAJ,CAAU,gBAAV,CAAN,CADF,IAGE,MAAMH,CAAAA,CAET,CAfI,C,mJAyBDV,C,CAAM,YACNc,CAAM,CAAG,GAAIvB,CAAAA,MAAM,CAACwB,MADd,CAENC,CAAS,CAAGZ,oBAAQa,KAAR,CAAcjB,CAAI,CAACgB,SAAnB,CAFN,CAGNE,CAAO,CAAGd,oBAAQe,SAAR,CAAkBnB,CAAI,CAACQ,KAAvB,CAA8BQ,CAA9B,CAHJ,CAINI,CAAmB,CAAG,oBAAoBC,IAApB,CAAyBH,CAAzB,CAJhB,CAKZ,GAAIE,CAAJ,CACE,MAAO,MAAKtB,KAAL,CAAWE,CAAI,CAACN,GAAhB,EAAqBK,IAArB,CAA0B,SAACuB,CAAD,QAAgB,CAAA,CAAI,CAACrB,OAAL,CAAaqB,CAAb,CAAhB,CAA1B,CAAP,CAGFR,CAAM,CAACS,SAAP,CAAiB,CACfC,GAAG,oCAA8BxB,CAAI,CAACN,GAAnC,aAA0CwB,CAA1C,CADY,CAAjB,CATY,CAYZJ,CAAM,CAACW,gBAAP,GAZY,CAaZ,GAAMC,CAAAA,CAAS,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAACC,CAAD,QAAad,CAAAA,CAAM,CAACY,SAAP,CAAiBE,CAAjB,CAAb,CAAZ,CAAlB,CAEA,MAAOF,CAAAA,CAAS,CAAC3B,IAAV,CAAe,SAACO,CAAD,CAAc,CAClC,GAAI,CAACA,CAAQ,CAACuB,UAAd,CAA0B,KAAM,IAAIhB,CAAAA,KAAJ,CAAU,2BAAV,CAAN,CAE1B,MADAC,CAAAA,CAAM,CAACd,IAAP,CAAcA,CACd,CAAOc,CACR,CAJM,CAKR,C","sourcesContent":["import cometdAdapter from 'cometd-nodejs-client';\nimport http from './http';\nimport Helpers from './helpers';\nimport WebApi from './web/api';\n\nif (typeof window === 'undefined') {\n  cometdAdapter.adapt();\n}\n\n// Old school require to fix adapter not adapting :)\nconst cometd = require('cometd');\n\n/**\n * Wrapper to open sockets\n *\n * @export\n * @class Session\n */\nexport default class Session {\n  /**\n   * Creates an instance of Session.\n   *\n   * @param {String} pin\n   * @param {String} [proxy] - Optional cors proxy server url\n   * @memberof Session\n   */\n  constructor(pin, proxy) {\n    this.pin = pin;\n    this.proxy = proxy;\n    this.web = new WebApi();\n\n    this.web.proxy = proxy;\n  }\n\n  /**\n   * Open a socket to the current game\n   *\n   * @returns {Promise<CometD>}\n   * @memberof Session\n   */\n  openSocket() {\n    return this.check(this.pin).then((info) => this.connect(info));\n  }\n\n  /**\n   * Get session info\n   *\n   * @param {Number|String} pin\n   * @returns {Promise<Object>} Game info\n   * @memberof Session\n   */\n  async check(pin) {\n    return http\n      .get(`${this.proxy}https://kahoot.it/reserve/session/${pin}/?${Helpers.time()}`)\n      .then((response) => {\n        const info = response.data;\n        info.token = response.headers['x-kahoot-session-token'];\n        info.pin = pin;\n\n        return info;\n      })\n      .catch((error) => {\n        if (error.message.includes('404')) {\n          throw new Error('Game not found');\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  /**\n   * Open a socket using the game info provided by the check function\n   *\n   * @param {Object} info\n   * @returns {Promise<CometD>}\n   * @memberof Session\n   */\n  connect(info) {\n    const socket = new cometd.CometD();\n    const challenge = Helpers.solve(info.challenge);\n    const session = Helpers.shiftBits(info.token, challenge);\n    const containsInvalidChar = /[^A-Z,^a-z,^0-9]/g.test(session);\n    if (containsInvalidChar) {\n      return this.check(info.pin).then((secondInfo) => this.connect(secondInfo));\n    }\n\n    socket.configure({\n      url: `https://kahoot.it/cometd/${info.pin}/${session}`,\n    });\n    socket.websocketEnabled = true;\n    const handshake = new Promise((resolve) => socket.handshake(resolve));\n\n    return handshake.then((response) => {\n      if (!response.successful) throw new Error('Session failed to connect');\n      socket.info = info;\n      return socket;\n    });\n  }\n}\n"],"file":"session.js"}